import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import cors from 'cors';
import dotenv from 'dotenv';
import cron from 'node-cron';
import { LocTrackerService } from './services/loctracker.js';
import { EventEmitter } from 'events';

dotenv.config();

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: "http://localhost:5173",
    methods: ["GET", "POST"]
  }
});

app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ LocTracker
const locTrackerService = new LocTrackerService(
  process.env.VITE_LOCTRACKER_API_URL,
  process.env.VITE_LOCTRACKER_USERNAME,
  process.env.VITE_LOCTRACKER_PASSWORD
);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
const cache = {
  devices: [],
  positions: [],
  activities: [],
  tasks: new Map(),
  fleetState: null,
  lastActivityId: -1,
  alerts: []
};

// Event emitter –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
const systemEvents = new EventEmitter();

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
async function updateDevices() {
  try {
    const devices = await locTrackerService.getDevices();
    cache.devices = devices;
    io.emit('devices:update', devices);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${devices.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
async function updatePositions() {
  try {
    const positions = await locTrackerService.getPositions();
    cache.positions = positions;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    positions.forEach(pos => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
      if (pos.speed > 90) {
        const alert = {
          id: Date.now(),
          type: 'SPEED_VIOLATION',
          deviceNumber: pos.deviceNumber,
          message: `–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: ${pos.speed} –∫–º/—á`,
          timestamp: new Date().toISOString(),
          severity: 'warning'
        };
        cache.alerts.push(alert);
        io.emit('alert:new', alert);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∑–∞–∂–∏–≥–∞–Ω–∏–µ–º
      if (pos.speed === 0 && pos.ignitionState === 'ON') {
        const lastPos = cache.positions.find(p => p.deviceNumber === pos.deviceNumber);
        if (lastPos && lastPos.speed === 0 && (Date.now() - pos.time) > 1800000) { // 30 –º–∏–Ω—É—Ç
          const alert = {
            id: Date.now(),
            type: 'LONG_IDLE',
            deviceNumber: pos.deviceNumber,
            message: '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º',
            timestamp: new Date().toISOString(),
            severity: 'info'
          };
          cache.alerts.push(alert);
          io.emit('alert:new', alert);
        }
      }
    });
    
    io.emit('positions:update', positions);
    console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–æ ${positions.length} –ø–æ–∑–∏—Ü–∏–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
async function updateActivities() {
  try {
    const activities = await locTrackerService.getActivities(cache.lastActivityId);
    if (activities && activities.length > 0) {
      cache.activities = [...activities, ...cache.activities].slice(0, 100); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100
      cache.lastActivityId = Math.max(...activities.map(a => a.id));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞–º
      activities.forEach(activity => {
        io.emit('activity:new', activity);
        
        // –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç—ã –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if (activity.type === 'TASK_VISIT') {
          const device = cache.devices.find(d => d.number === activity.deviceNumber);
          const alert = {
            id: Date.now(),
            type: 'TASK_COMPLETED',
            deviceNumber: activity.deviceNumber,
            message: `${device?.name || activity.deviceNumber} –ø—Ä–∏–±—ã–ª –Ω–∞ —Ç–æ—á–∫—É`,
            timestamp: new Date().toISOString(),
            severity: 'success'
          };
          cache.alerts.push(alert);
          io.emit('alert:new', alert);
        }
      });
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${activities.length} –Ω–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–∞
async function updateFleetState() {
  try {
    const fleetState = await locTrackerService.getFleetState();
    cache.fleetState = fleetState;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      total: cache.devices.length,
      online: cache.positions.filter(p => Date.now() - p.time < 300000).length, // –û–Ω–ª–∞–π–Ω - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      moving: cache.positions.filter(p => p.speed > 5).length,
      idle: cache.positions.filter(p => p.speed <= 5 && p.ignitionState === 'ON').length,
      stopped: cache.positions.filter(p => p.ignitionState === 'OFF').length
    };
    
    io.emit('fleet:stats', stats);
    console.log(`üöõ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–∞:', error.message);
  }
}

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
app.get('/api/devices', (req, res) => {
  res.json(cache.devices);
});

app.get('/api/positions', (req, res) => {
  res.json(cache.positions);
});

app.get('/api/activities', (req, res) => {
  res.json(cache.activities);
});

app.get('/api/fleet/stats', (req, res) => {
  const stats = {
    total: cache.devices.length,
    online: cache.positions.filter(p => Date.now() - p.time < 300000).length,
    moving: cache.positions.filter(p => p.speed > 5).length,
    idle: cache.positions.filter(p => p.speed <= 5 && p.ignitionState === 'ON').length,
    stopped: cache.positions.filter(p => p.ignitionState === 'OFF').length
  };
  res.json(stats);
});

app.get('/api/alerts', (req, res) => {
  res.json(cache.alerts.slice(-50)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∞–ª–µ—Ä—Ç–æ–≤
});

app.get('/api/device/:deviceNumber/tasks', async (req, res) => {
  try {
    const tasks = await locTrackerService.getDeviceTasks(req.params.deviceNumber);
    cache.tasks.set(req.params.deviceNumber, tasks);
    res.json(tasks);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/device/:deviceNumber/task', async (req, res) => {
  try {
    const result = await locTrackerService.addTask(req.params.deviceNumber, req.body);
    io.emit('task:created', { deviceNumber: req.params.deviceNumber, task: req.body });
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post('/api/device/:deviceNumber/message', async (req, res) => {
  try {
    const result = await locTrackerService.sendMessage(req.params.deviceNumber, req.body.message);
    io.emit('message:sent', { deviceNumber: req.params.deviceNumber, message: req.body.message });
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.delete('/api/device/:deviceNumber/tasks/pending', async (req, res) => {
  try {
    const result = await locTrackerService.deletePendingTasks(req.params.deviceNumber);
    io.emit('tasks:deleted', { deviceNumber: req.params.deviceNumber });
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
io.on('connection', (socket) => {
  console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', socket.id);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  socket.emit('initial:data', {
    devices: cache.devices,
    positions: cache.positions,
    activities: cache.activities.slice(0, 50),
    alerts: cache.alerts.slice(-20)
  });
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  socket.on('subscribe:device', async (deviceNumber) => {
    socket.join(`device:${deviceNumber}`);
    const tasks = await locTrackerService.getDeviceTasks(deviceNumber);
    socket.emit('device:tasks', { deviceNumber, tasks });
  });
  
  socket.on('unsubscribe:device', (deviceNumber) => {
    socket.leave(`device:${deviceNumber}`);
  });
  
  socket.on('disconnect', () => {
    console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', socket.id);
  });
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
cron.schedule('*/10 * * * * *', updatePositions);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
cron.schedule('*/5 * * * * *', updateActivities);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('0 * * * * *', updateDevices);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
cron.schedule('*/30 * * * * *', updateFleetState);

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', () => {
  const fiveMinutesAgo = Date.now() - 300000;
  cache.alerts = cache.alerts.filter(alert => 
    new Date(alert.timestamp).getTime() > fiveMinutesAgo
  );
  console.log('üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∞–ª–µ—Ä—Ç—ã');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3001;
httpServer.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  await updateDevices();
  await updatePositions();
  await updateActivities();
  await updateFleetState();
  console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
});