import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const API_URL = process.env.VITE_LOCTRACKER_API_URL;
const USERNAME = process.env.VITE_LOCTRACKER_USERNAME;
const PASSWORD = process.env.VITE_LOCTRACKER_PASSWORD;

async function checkRealData() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ LocTracker API...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('üìä –ê–ö–¢–ò–í–ù–û–°–¢–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è):');
    const activitiesUrl = `${API_URL}/${USERNAME}/activities?password=${encodeURIComponent(PASSWORD)}&latestRecordId=-1`;
    const activitiesRes = await axios.get(activitiesUrl);
    const activities = activitiesRes.data.activities || activitiesRes.data;
    
    if (Array.isArray(activities) && activities.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${activities.length}`);
      activities.slice(0, 5).forEach(activity => {
        const date = new Date(activity.created);
        console.log(`  - ${activity.type} | ${activity.deviceNumber} | ${date.toLocaleString('ru')}`);
      });
    } else {
      console.log('  –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π');
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log('\nüìã –ó–ê–î–ê–ß–ò (–¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤):');
    const devicesUrl = `${API_URL}/${USERNAME}/devices?password=${encodeURIComponent(PASSWORD)}`;
    const devicesRes = await axios.get(devicesUrl);
    const devices = devicesRes.data.devices || devicesRes.data;
    
    for (const device of devices.slice(0, 3)) {
      const tasksUrl = `${API_URL}/${USERNAME}/tasks/${device.number}/trip?password=${encodeURIComponent(PASSWORD)}`;
      try {
        const tasksRes = await axios.get(tasksUrl);
        const tasks = tasksRes.data.tasks || tasksRes.data;
        
        if (Array.isArray(tasks) && tasks.length > 0) {
          console.log(`\n  ${device.registrationNumber} (${device.name}):`);
          tasks.slice(0, 3).forEach(task => {
            console.log(`    ‚úì ${task.locationAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`      –°—Ç–∞—Ç—É—Å: ${task.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
            if (task.actionTagModel) {
              console.log(`      –¢–∏–ø: ${task.actionTagModel.actionType}`);
            }
          });
        } else {
          console.log(`  ${device.registrationNumber}: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`);
        }
      } catch (error) {
        console.log(`  ${device.registrationNumber}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á`);
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä–∫–∞
    console.log('\nüöõ –°–û–°–¢–û–Ø–ù–ò–ï –ê–í–¢–û–ü–ê–†–ö–ê:');
    const fleetUrl = `${API_URL}/${USERNAME}/fleet/state?password=${encodeURIComponent(PASSWORD)}`;
    try {
      const fleetRes = await axios.get(fleetUrl);
      console.log('  –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–ø–∞—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã');
      if (fleetRes.data) {
        console.log(`  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:`, Object.keys(fleetRes.data));
      }
    } catch (error) {
      console.log('  –≠–Ω–¥–ø–æ–∏–Ω—Ç fleet/state –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    console.log('\nüìç –¢–ï–ö–£–©–ï–ï –î–í–ò–ñ–ï–ù–ò–ï:');
    const positionsUrl = `${API_URL}/${USERNAME}/positions?password=${encodeURIComponent(PASSWORD)}`;
    const positionsRes = await axios.get(positionsUrl);
    const positions = positionsRes.data.positions || positionsRes.data;
    
    const moving = positions.filter(p => p.speed > 5);
    const idle = positions.filter(p => p.speed <= 5 && p.ignitionState === 'ON');
    const stopped = positions.filter(p => p.ignitionState === 'OFF');
    
    console.log(`  –í –¥–≤–∏–∂–µ–Ω–∏–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å > 5 –∫–º/—á): ${moving.length} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤`);
    if (moving.length > 0) {
      moving.slice(0, 5).forEach(pos => {
        const device = devices.find(d => d.number === pos.deviceNumber);
        console.log(`    ‚Ä¢ ${device?.registrationNumber || pos.deviceNumber}: ${pos.speed} –∫–º/—á`);
      });
    }
    
    console.log(`  –ù–∞ —Ö–æ–ª–æ—Å—Ç–æ–º —Ö–æ–¥—É: ${idle.length} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤`);
    console.log(`  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${stopped.length} —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log('\nüìà –û–¢–ß–ï–¢ –ó–ê 24 –ß–ê–°–ê:');
    const firstDevice = devices[0];
    if (firstDevice) {
      const to = Date.now();
      const from = to - 24 * 60 * 60 * 1000;
      const reportUrl = `${API_URL}/${USERNAME}/reports/period-summary/${firstDevice.number}?password=${encodeURIComponent(PASSWORD)}&from=${from}&to=${to}`;
      
      try {
        const reportRes = await axios.get(reportUrl);
        console.log(`  ${firstDevice.registrationNumber}:`);
        const report = reportRes.data;
        
        if (report.totalDistance !== undefined) {
          console.log(`    –ü—Ä–æ–±–µ–≥: ${(report.totalDistance / 1000).toFixed(1)} –∫–º`);
        }
        if (report.totalFuel !== undefined) {
          console.log(`    –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: ${report.totalFuel} –ª`);
        }
        if (report.avgSpeed !== undefined) {
          console.log(`    –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${report.avgSpeed} –∫–º/—á`);
        }
      } catch (error) {
        console.log(`  –û—Ç—á–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${error.response?.data?.errorDescription || error.message}`);
      }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–æ–≤
    console.log('\nüìä –¢–ê–•–û–ì–†–ê–§–´:');
    const tachoUrl = `${API_URL}/${USERNAME}/tachographs/state?password=${encodeURIComponent(PASSWORD)}`;
    try {
      const tachoRes = await axios.get(tachoUrl);
      const tachos = tachoRes.data.tachographs || tachoRes.data;
      if (Array.isArray(tachos) && tachos.length > 0) {
        console.log(`  –ù–∞–π–¥–µ–Ω–æ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–æ–≤: ${tachos.length}`);
      } else {
        console.log('  –î–∞–Ω–Ω—ã–µ —Ç–∞—Ö–æ–≥—Ä–∞—Ñ–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    } catch (error) {
      console.log('  –¢–∞—Ö–æ–≥—Ä–∞—Ñ—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

checkRealData();